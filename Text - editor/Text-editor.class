import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class TextEditor extends JFrame implements ActionListener {
   JTextArea textArea = new JTextArea();
   JScrollPane scrollPane;
   JMenuBar menuBar;
   JMenu fileMenu;
   JMenu editMenu;
   JMenuItem newFileItem;
   JMenuItem openFileItem;
   JMenuItem saveFileItem;
   JMenuItem closeItem;
   JMenuItem cutItem;
   JMenuItem copyItem;
   JMenuItem pasteItem;
   JMenuItem printItem;

   public TextEditor() {
      this.textArea.setFont(new Font("Arial", 0, 14));
      this.textArea.setLineWrap(true);
      this.textArea.setWrapStyleWord(true);
      this.scrollPane = new JScrollPane(this.textArea, 22, 32);
      this.menuBar = new JMenuBar();
      this.fileMenu = new JMenu("File");
      this.newFileItem = new JMenuItem("New");
      this.openFileItem = new JMenuItem("Open");
      this.saveFileItem = new JMenuItem("Save");
      this.closeItem = new JMenuItem("Close");
      this.printItem = new JMenuItem("Print");
      this.fileMenu.add(this.newFileItem);
      this.fileMenu.add(this.openFileItem);
      this.fileMenu.add(this.saveFileItem);
      this.fileMenu.add(this.closeItem);
      this.fileMenu.addSeparator();
      this.fileMenu.add(this.printItem);
      this.editMenu = new JMenu("Edit");
      this.cutItem = new JMenuItem("Cut");
      this.copyItem = new JMenuItem("Copy");
      this.pasteItem = new JMenuItem("Paste");
      this.editMenu.add(this.cutItem);
      this.editMenu.add(this.copyItem);
      this.editMenu.add(this.pasteItem);
      this.menuBar.add(this.fileMenu);
      this.menuBar.add(this.editMenu);
      this.setJMenuBar(this.menuBar);
      this.add(this.scrollPane);
      this.newFileItem.addActionListener(this);
      this.openFileItem.addActionListener(this);
      this.saveFileItem.addActionListener(this);
      this.closeItem.addActionListener(this);
      this.cutItem.addActionListener(this);
      this.copyItem.addActionListener(this);
      this.pasteItem.addActionListener(this);
      this.printItem.addActionListener(this);
   }

   public void actionPerformed(ActionEvent e) {
      if (e.getSource() == this.newFileItem) {
         this.textArea.setText("");
         this.setTitle("Text Editor");
      } else {
         JFileChooser fileChooser;
         int result;
         File selectedFile;
         if (e.getSource() == this.openFileItem) {
            fileChooser = new JFileChooser();
            result = fileChooser.showOpenDialog(this);
            if (result == 0) {
               selectedFile = fileChooser.getSelectedFile();

               try {
                  BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
                  String line = null;
                  this.textArea.setText("");

                  while((line = reader.readLine()) != null) {
                     this.textArea.append(line + "\n");
                  }

                  this.setTitle("Text Editor - " + selectedFile.getName());
                  reader.close();
               } catch (IOException var9) {
                  JOptionPane.showMessageDialog(this, "Error reading file", "Error", 0);
               }
            }
         } else if (e.getSource() == this.saveFileItem) {
            fileChooser = new JFileChooser();
            result = fileChooser.showSaveDialog(this);
            if (result == 0) {
               selectedFile = fileChooser.getSelectedFile();

               try {
                  BufferedWriter writer = new BufferedWriter(new FileWriter(selectedFile));
                  writer.write(this.textArea.getText());
                  writer.close();
                  this.setTitle("Text Editor - " + selectedFile.getName());
               } catch (IOException var8) {
                  JOptionPane.showMessageDialog(this, "Error saving file", "Error", 0);
               }
            }
         } else if (e.getSource() == this.closeItem) {
            System.exit(0);
         } else if (e.getSource() == this.cutItem) {
            this.textArea.cut();
         } else if (e.getSource() == this.copyItem) {
            this.textArea.copy();
         } else if (e.getSource() == this.pasteItem) {
            this.textArea.paste();
         } else if (e.getSource() == this.printItem) {
            try {
               this.textArea.print();
            } catch (Exception var7) {
               JOptionPane.showMessageDialog(this, "Error printing file", "Error", 0);
            }
         }
      }

   }
}
